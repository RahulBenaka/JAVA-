BST Class
Send Feedback
Implement the BST class which includes following functions -
1. search
Given an element, find if that is present in BST or not. Return true or false.
2. insert -
Given an element, insert that element in the BST at the correct position. If element is equal to the data of the node, insert it in the left subtree.
3. delete -
Given an element, remove that element from the BST. If the element which is to be deleted has both children, replace that with the minimum element from right sub-tree.
4. printTree (recursive) -
Print the BST in ithe following format -
For printing a node with data N, you need to follow the exact format -
N:L:x,R:y
wherer, N is data of any node present in the binary tree. x and y are the values of left and right child of node N. Print the children only if it is not null.
There is no space in between.
You need to print all nodes in the recursive format in different lines.






//Print tree follows Preorder
//Also wrote this code on my own by watching lecture videos of diff func 


import java.util.*;
import java.lang.*;
/*
 * Binary Tree Node class
 * 
 * class BinaryTreeNode<T> { 
 * 		T data; 
 * 		BinaryTreeNode<T> left; 
 * 		BinaryTreeNode<T> right;
 * 		public BinaryTreeNode(T data) 
 * 		{ 
 * 			this.data = data; 
 * 		}
 * }
 */

 /* 
 * Main Method being used internally
 *	public static void main(String[] args) throws IOException {
 *		BinarySearchTree bst = new BinarySearchTree();
 *		int choice, input;
 *		int q = Integer.parseInt(br.readLine());
 *		while (q-- > 0) {
 *			st = new StringTokenizer(br.readLine());
 *			choice = Integer.parseInt(st.nextToken());
 *			switch (choice) {
 *			case 1:
 *				input = Integer.parseInt(st.nextToken());
 *				bst.insert(input);
 *				break;
 *				case 2:
 *				input = Integer.parseInt(st.nextToken());
 *				bst.remove(input);
 *				break;
 *			case 3:
 *				input = Integer.parseInt(st.nextToken());
 *				System.out.println(bst.search(input));
 *				break;
 *			default:
 *				bst.printTree();
 *				break;
 *			}
 *		}
 *	}
 */

public class BinarySearchTree {
    
    private BinaryTreeNode<Integer> root;
    
    
    public static BinaryTreeNode<Integer> insertHelper(BinaryTreeNode<Integer> root, int data){
        if(root == null){
            BinaryTreeNode<Integer> temp = new BinaryTreeNode<Integer>(data);
            return temp;
        }
            
        if(root.data < data)
            root.right = insertHelper(root.right, data);
        else
            root.left = insertHelper(root.left, data);
        
        return root;
    }
    
	public void insert(int data) {
		//Implement the insert() function
        
        root = insertHelper(root, data);
	}
	
    static class delete{
        BinaryTreeNode<Integer> root;
        boolean bool;
        
        delete(BinaryTreeNode<Integer> root, boolean bool){
            this.root = root;
            this.bool = bool;
        }
    }
    
    public static int minimum(BinaryTreeNode<Integer> root){
        if(root == null)
            return Integer.MAX_VALUE;
        
        int left = minimum(root.left);
        
        return Math.min(root.data, left);
    }
    
    public static delete removeHelper(BinaryTreeNode<Integer> root, int data){
        if(root == null){ //If root is null, return null
            delete x = new delete(null, true);
            return x;
        }
        
        delete ans = new delete(null, false); //Create an object to return it which has root node and also
        //tells us whether the data value was actually deleted or not. If data exists, then after deletion it will return true.
        //If data does not exist in true, then we cannot delete it and hence it will return false at that time 
        
        if(root.data > data){ //If data less that root value, then we have to move left
             delete newLeft = removeHelper(root.left, data); //we save the new left root value in the object
             root.left = newLeft.root; //and then copy the new root's left value to the root.left
        }else if(root.data < data){//If data greater that root value, then we have to move right
             delete newRight = removeHelper(root.right, data);//we save the new right root value in the object
            root.right = newRight.root;//and then copy the new root's right value to the root.right
        }
        
        if(root.data == data){//This is the case when we actually encounter the node which have to be deleted
            if(root.right == null && root.left == null){//If it does not have any childer, we can directly return null
                ans = new delete(root, true);  
            }
            else if(root.right == null && root.left != null){//If it has left child, then we have to send that as
                ans = new delete(root.left, true);//the new value of root as the root value will be deleted 
            }    
            else if(root.left == null && root.right != null){//If it has right child, then we have to send that as
                ans = new delete(root.right, true);//the new value of root as the root value will be deleted 
            }
               
            else if(root.left != null && root.right != null){//This is the case when both childern exist
                ans = new delete(root, true);//At that point, we copy the minimum elem of the right side And to find that
                root.data = minimum(root.right);//we use a minimum function that value will be considered as the new root value
                                           //and the old value will be discared which will result in deletion of the desired root value
                delete newRight = removeHelper(root.right, data);//Then we delete the original root.right as it is already
                                           //been assigned as new root by deleting the old root. Henew we are finiding the 
                                           //new right for the new root.
            	root.right = newRight.root;//After that, finally we assign the new right to the right of new root and the 
                                           //old root which had to be deleted will be deleted successfully
            }
        }
        
        return ans; //Finally return the object which has root node and info about whether the node existed or not
    }
    
    
	public void remove(int data) {
		//Implement the remove() function
        delete ans = removeHelper(root, data);
        root = ans.root;
	}
	
    public static void printHelper(BinaryTreeNode<Integer> root) {
		//Your code goes here
        if(root == null)
            return;
        	
        System.out.print(root.data + ":");
            
        if(root.left != null && root.right != null)
            System.out.print("L:" + root.left.data + ",R:" + root.right.data);
        else if(root.left != null && root.right == null)
			System.out.print("L:" + root.left.data + ",");
        else if(root.right != null && root.left == null)
			System.out.print("R:" + root.right.data);
            
        System.out.println();
        
        printHelper(root.left);
        printHelper(root.right);
	}
    
	public void printTree() {
		//Implement the printTree() function
        printHelper(root);
        
	}
    
    public static boolean searchHelper(BinaryTreeNode<Integer> root, int x){
        if(root == null)
            return false;
        
        if(root.data == x)
            return true;
        
        if(root.data < x)
        	return searchHelper(root.left, x);
        else
            return searchHelper(root.right, x);
    }
	
	public boolean search(int data) {
		//Implement the search() function
        return searchHelper(root, data);
	}
	

}