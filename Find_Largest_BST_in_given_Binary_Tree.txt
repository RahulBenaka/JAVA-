Largest BST
Send Feedback
Given a Binary tree, find the largest BST subtree. That is, you need to find the BST with maximum height in the given binary tree. You have to return the height of largest BST.
Input format :
The first line of input contains data of the nodes of the tree in level order form. The data of the nodes of the tree is separated by space. If any node does not have left or right child, take -1 in its place. Since -1 is used as an indication whether the left or right nodes exist, therefore, it will not be a part of the data of any node.
Output format:
The first and only line of output contains the height of the largest BST.
Constraints:
Time Limit: 1 second
Sample Input 1:
5 10 6 2 3 -1 -1 -1 -1 -1 9 -1 -1
Sample Output 1:
2




//Did not write this on my own. Understood the concept by watching hint video but did not write code
//Both the approaches are given here. Use any one to get the answer
//Also use and learn the First approach though it has Time Complexity of O(n*h) where h is height of the tree.
//As First method is easy to understand and code

public class Solution {
	/*
	 * BinaryTreeNode class
	 * 
	 * class BinaryTreeNode<T> 
	 * { 
	 * 		T data; 
	 * 		BinaryTreeNode<T> left; 
	 * 		BinaryTreeNode<T> right;
	 *		public BinaryTreeNode(T data) 
	 *		{
	 *  		this.data = data; 
	 *  	} 
	 *  }
	 */
	
	static class Value{
	int min;
	int max;
	boolean present;
	int h;
}
	//Approach 1  
	public static int largestBSTSubtree(BinaryTreeNode<Integer> root) {
		//Base Case
		if(root == null)
			return 0;
		if(isBST(root))
			return height(root);
		else
			return Math.max(largestBSTSubtree(root.left),largestBSTSubtree(root.right)); //Rec case
		
	}
	public static boolean isBST(BinaryTreeNode<Integer> root){
			return isBST(root,Integer.MIN_VALUE,Integer.MAX_VALUE);
	}
	public static boolean isBST(BinaryTreeNode<Integer> root, int min,int max){  //Time Complexity : O(n)
		if(root == null)
			return true;
		if(root.data < min || root.data > max)
			return false;
		else
			return isBST(root.left,min,root.data -1) && isBST(root.right,root.data +1,max);
	}
	public static int height(BinaryTreeNode<Integer> root){
		if(root == null)
			return 0;
		return 1 + Math.max(height(root.left),height(root.right));
	}

	//Approach 2
	public static int largestBSTSubtree(BinaryTreeNode<Integer> root) {
		return largestBSTSubtree_help(root).h;
	}
	public static Value largestBSTSubtree_help(BinaryTreeNode<Integer>root){
		Value v = new Value();
		if(root == null){
			v.h = 0;
			v.present = true;
			v.min = Integer.MAX_VALUE;
			v.max = Integer.MIN_VALUE; 
			return v;
		}
		//Rec Case
		Value vLeft = largestBSTSubtree_help(root.left);
		Value vRight = largestBSTSubtree_help(root.right);
		//Small Calculation
		v.h = Math.max(vLeft.h,vRight.h);
		v.min = Math.min(root.data,Math.min(vLeft.min,vRight.min));
	    v.max = Math.max(root.data,Math.max(vLeft.max,vRight.max));
		if(vLeft.present && vRight.present){
			v.present = true;
			if(root.data > vLeft.max  && root.data < vRight.min){
				v.h ++;
				v.present = true;
			}else
				v.present = false;		
		    return v;
		}
		v.present = false;
		return v;

	}
}