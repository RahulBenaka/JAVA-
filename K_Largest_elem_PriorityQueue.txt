K Largest Elements
Send Feedback
You are given with an integer k and an array of integers that contain numbers in random order. Write a program to find k largest numbers from given array. You need to save them in an array and return it.
Time complexity should be O(nlogk) and space complexity should be not more than O(k).
Order of elements in the output is not important.
Input Format :
Line 1 : Size of array (n)
Line 2 : Array elements (separated by space)
Line 3 : Integer k
Output Format :
k largest elements
Sample Input :
13
2 12 9 16 10 5 3 20 25 11 1 8 6 
4
Sample Output :
12
16
20
25




//The code ws written by me without any help and didn't see any hint videos also


import java.util.*;

public class Solution {

	public static ArrayList<Integer> kLargest(int input[], int k) {
		/* Your class should be named Solution
		* Don't write main().
		* Don't read input, it is passed as function argument.
		* Return output and don't print it.
		* Taking input and printing output is handled automatically.
		*/
		PriorityQueue<Integer> q = new PriorityQueue<>();
        
        if(k > input.length || input.length == 0 || k == 0)
            return null;
        
        for(int i: input){
            q.add(i);
        }
        
        int i=0, j=0;
        ArrayList<Integer> temp = new ArrayList<>(); 
        
        for(i=q.size()-1; i>=0; i--){
            temp.add(q.poll());
            
        }
        
        ArrayList<Integer> ans = new ArrayList<>(); 
        while(j<k){//Here we need to add the the elem from the last of the min priority queue, hence to obtain 
            ans.add(temp.remove(input.length - j - 1));//the index of the last elem and continue to traverse in
            j++;n                                      //reverse fashion we hvae used input.length-j-1. 
        }
        //Ex: For j = 0 input.length - 0 - 1 = input.length - 1 i.e. last elem
        //    For j = 1 input.length - 1 - 1 = input.length - 2 i.e. last but one elem 
        //    For j = 2 input.length - 2 - 1 = input.length - 3 i.e. last but second elem 
        //Like this we do till we get our first k largest elem
        
        return ans;
	}
}