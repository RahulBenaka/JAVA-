Longest Consecutive Sequence
Send Feedback
You are given an array of unique integers that contain numbers in random order. You have to find the longest possible sequence of consecutive numbers using the numbers from given array.
You need to return the output array which contains starting and ending element. If the length of the longest possible sequence is one, then the output array must contain only single element.
Note:
1. Best solution takes O(n) time.
2. If two sequences are of equal length, then return the sequence starting with the number whose occurrence is earlier in the array.
Input format:
The first line of input contains an integer, that denotes the value of the size of the array. Let us denote it with the symbol n.
The following line contains n space separated integers, that denote the value of the elements of the array.
Output format:
The first and only line of output contains starting and ending element of the longest consecutive sequence. If the length of longest consecutive sequence, then just print the starting element.
Constraints :
0 <= n <= 10^6
Time Limit: 1 sec
Sample Input 1 :
13
2 12 9 16 10 5 3 20 25 11 1 8 6 
Sample Output 1 :
8 12 
Sample Input 2 :
7
3 7 2 1 9 8 41
Sample Output 2 :
7 9
Explanation: Sequence should be of consecutive numbers. Here we have 2 sequences with same length i.e. [1, 2, 3] and [7, 8, 9], but we should select [7, 8, 9] because the starting point of [7, 8, 9] comes first in input array and therefore, the output will be 7 9, as we have to print starting and ending element of the longest consecutive sequence.
Sample Input 3 :
7
15 24 23 12 19 11 16
Sample Output 3 :
15 16





//Wrote this code on my own without even seeing hint video or git repo. Completely own code



import java.util.*;

public class Solution {
	public static ArrayList<Integer> longestConsecutiveIncreasingSequence(int[] arr) {
		/* Your class should be named Solution
		 * Don't write main().
		 * Don't read input, it is passed as function argument.
		 * Return output and don't print it.
	 	 * Taking input and printing output is handled automatically.
		*/
        
        HashMap<Integer, Boolean> map = new HashMap<>();
        ArrayList<Integer> a = new ArrayList<>();
        
        for(int i: arr){
            if(map.containsKey(i)){
                continue;
            }else
                map.put(i, true);
        }
        
        int max = 0;
        
        for(int i: arr){//Check for every element in array
            if(map.containsKey(i)){ //If that elem exists in map
                ArrayList<Integer> x = new ArrayList<>();
                x.add(i); //Make that as the starting point
                
                int temp = i+1; //take the next no. after starting point as it should be a consecutive nuumber
                int count = 1; //and make the count as 1
                
                while(map.containsKey(temp)){ //check if every consecutive elem of starting num exists 
                    temp++; //and this loop will run till we encounter a point where consecutive no. wont exist
                    count++;//and by this count variable, we will get the length of the consecutive terms
                }
                
                if(count>max){ //chech if this length is greater than the max consecutive length  
                    max = count; //If it is, then change the max length 
                    x.add(temp-1); //and append the end point(if you have doubt with why it is temp-1, print the value to get to know why it is temp-1)
                    a = new ArrayList<>();//Then update the new starting and ending point to the ArrayList
                    for(int j: x){//which we have to return at the end
                        a.add(j);
                    }
                	x = new ArrayList<>();//and make the temp ArrayList empty, so we can calculate consecutive 
                                          //terms length for every elem present in array
                }
            }
        }
        
        return a;
    }
}