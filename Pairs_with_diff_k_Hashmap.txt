Pairs with difference K
Send Feedback
You are given with an array of integers and an integer K. You have to find and print the count of all such pairs which have difference K.
Note: Take absolute difference between the elements of the array.
Input Format:
The first line of input contains an integer, that denotes the value of the size of the array. Let us denote it with the symbol n.
The following line contains n space separated integers, that denote the value of the elements of the array.
The following line contains an integer, that denotes the value of K.
Output format :
The first and only line of output contains count of all such pairs which have an absolute difference of K. 
Constraints :
0 <= n <= 10^4
Time Limit: 1 sec
Sample Input 1 :
4 
5 1 2 4
3
Sample Output 1 :
2
Sample Input 2 :
4
4 4 4 4 
0
Sample Output 2 :
6




//Wrote this code on my own after watching hint video only once(Problem was tough to crack, but easily cracked by 15 mins)



import java.util.*;

public class Solution {

	public static int getPairsWithDifferenceK(int input[], int d) {
		//Write your code here
        
        //Here d means difference and input[] is the array given
        
        HashMap<Integer, Integer> map = new HashMap<>();
        int count = 0;
        
        for(int k: input){ //Add the elem and its frequence to a HashMap
            if(map.containsKey(k)){
                 map.put(k, map.get(k)+1);
            }else
                map.put(k, 1);
        }
        
        for(int elem: input){ //Traverse through the array to check for each and every elem
            
            if(d == 0){ //This is the special case for d = 0 and we should handle it seperately
                int pair1 = elem; //If d = 0, i.e. difference is 0, then a no. can be either the same no. itself
                int pair2 = -elem;//or if we have -ve of same number, we can also consider that as a different case 
                int ans1 = 0, ans2 = 0; //and the save the count of pairs for positive and negative of sane no. in
                                        //different variables
                
                if(map.containsKey(pair1)){//If map contains the same elem
                    int temp = map.get(pair1);//The no. of pairs will be sum of 1st natural numbers equal to the  
                    ans1 = temp*(temp-1)/2;//frequency of that number in the array                       
                	map.put(pair1, 0);//After obtaining the count of total no. of pairs, remove the variable from Hashmap
                }
                
                if(map.containsKey(pair2)){//If map contains the -ve of elem
                    int temp = map.get(pair2);//The no. of pairs will be sum of 1st natural numbers equal to the 
                    ans2 = temp*(temp-1)/2;//frequency of that number in the array                          
                	map.put(pair2, 0);//After obtaining the count of total no. of pairs, remove the variable from Hashmap
                }
                
                count += ans1 + ans2;//At last add the total count of no. of pairs formed by elem and the -ve of the elem
                                     //and update that value to the count which we return 
                continue;
            }
			
            //For general case, the number which can give the differnece d when subtracted with given elem can be
            int pair1 = elem - d;//either a number greater than d  
            int pair2 = elem + d;//or a number lesser than d. For ex: if elem = 2 and d = 3, the pair can either be
                                 //pair1 = 2+3 = 5 or pair2 = 2-3= -1. bcoz, 5-2 = 3 = d and 2-(-1) = 3 = d
            int freqPair1 = 0, freqPair2 = 0;//Take seperate variables to store the no. of pairs formed by pair1 and pair2
            
            if(map.containsKey(pair1) && map.containsKey(elem))//If map contains both pair1 and elem
                freqPair1 = map.get(pair1)*map.get(elem);//Then it will be product of freq of pair1 and freq of elem
            
            //(Here numbers shouldn't be used uniquely, same 2 can form pair with -1 and 5, To understand more see the sample testcases)
                
            if(map.containsKey(pair2) && map.containsKey(elem))//If map contains both pair2 and elem
                freqPair2 = map.get(pair2)*map.get(elem);//Then it will be product of freq of pair2 and freq of elem
                
                	int totalFreq = freqPair1 + freqPair2;//After obtaining freq of pairs formed by pair1 and pair2 with elem
                                                          //add both of those counts to obtain total no. of pairs formed by
                                                          //elem to obtain the difference d
                	
            		count += totalFreq;//Then add that value to the count which we return at the end
                 
                    map.put(elem, 0);//Since we have found the count of pairs formed by elem, we just have to remove only
                                     //elem from the Hashmap and not remove pair1 and pair2
        }                        
        
        return count;
	}
}