Level wise linkedlist
Send Feedback
Given a binary tree, write code to create a separate linked list for each level. You need to return the array which contains head of each level linked list.
Input format :
The first line of input contains data of the nodes of the tree in level order form. The data of the nodes of the tree is separated by space. If any node does not have left or right child, take -1 in its place. Since -1 is used as an indication whether the left or right nodes exist, therefore, it will not be a part of the data of any node.
Output format :
Each level linked list is printed in new line (elements are separated by space).
Constraints:
Time Limit: 1 second
Sample Input 1:
5 6 10 2 3 -1 -1 -1 -1 -1 9 -1 -1
Sample Output 1:
5 
6 10 
2 3 
9


//Have used the code of printLevelWise (only printing roots in line, not detailed explaination one(R:L:,R:)) and modified that code
//If you have any doubts regarding this if else conditions, check that programs comments, you will understand all of if else statements
//Coded this on my own and was successfull at first attempt!

import java.util.*;
import java.lang.*;

public class Solution {
	/*
	 * BinaryTreeNode class
	 * 
	 * class BinaryTreeNode<T> 
	 * { 
	 * 		T data; 
	 * 		BinaryTreeNode<T> left; 
	 * 		BinaryTreeNode<T> right;
	 *		public BinaryTreeNode(T data) 
	 *		{
	 *  		this.data = data; 
	 *  	} 
	 *  }
	 */
	/*
	 * LinkedListNode Class
	 * class LinkedListNode<T> 
	 * { 
	 * 		T data; 
	 * 		LinkedListNode<T> next;
	 * 		public LinkedListNode(T data) 	
	 * 		{
	 *  		this.data = data; 
	 *  	} 
	 *  }
	 */
    
	public static ArrayList<LinkedListNode<Integer>> constructLinkedListForEachLevel(BinaryTreeNode<Integer> root){
		// Write your code here
        if(root == null)
            return null;
        
        Queue<BinaryTreeNode<Integer>> q = new LinkedList<BinaryTreeNode<Integer>>();
        q.add(root); //First add the root to the queue in starting
        
        BinaryTreeNode<Integer> divider = new BinaryTreeNode<Integer>(null);
        q.add(divider);
        
        
        LinkedListNode<Integer> tail = new LinkedListNode<Integer>(0);;
        boolean bool = true;
        
        ArrayList<LinkedListNode<Integer>> ans = new ArrayList<LinkedListNode<Integer>>();
        
        while(!q.isEmpty()){
            
            BinaryTreeNode<Integer> x = q.poll();
            
            if(x.data == null && q.size() == 0)
                continue;
            else if(x.data == null){
                tail.next = null;
                q.add(divider);
                bool = true;
            }else if(x.data != null && bool == true){
    			LinkedListNode<Integer> head = new LinkedListNode<Integer>(x.data);
                tail = head;
                ans.add(head);
                bool = false;
            }else if(x.data != null && bool == false){
                LinkedListNode<Integer> temp = new LinkedListNode<Integer>(x.data);
                tail.next = temp;
                tail = tail.next; 
            }
                   
            if(x.left != null)
                q.add(x.left);
            
            if(x.right != null)
                q.add(x.right);
		}
        
        return ans;
        
	}

}